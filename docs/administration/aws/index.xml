<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HortaCloud – AWS</title><link>https://hortacloud.janelia.org/docs/administration/aws/</link><description>Recent content in AWS on HortaCloud</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://hortacloud.janelia.org/docs/administration/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Costs</title><link>https://hortacloud.janelia.org/docs/administration/aws/costs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hortacloud.janelia.org/docs/administration/aws/costs/</guid><description>
&lt;p>Deploying this system on Amazon Web Services (AWS) incurs a monthly cost for AWS service usage.&lt;/p>
&lt;p>In particular, the cost breakdown is roughly:&lt;/p>
&lt;ul>
&lt;li>$382/mo - Per user costs for running the Horta client on AppStream&lt;/li>
&lt;li>$277/mo - Back-end services running on EC2 (with Savings Plan)&lt;/li>
&lt;li>$76/mo - Storage (3 TB) for one sample image on S3&lt;/li>
&lt;li>$34/mo - Virtual Private Cloud (VPC)&lt;/li>
&lt;/ul>
&lt;p>Therefore, the minimum total cost per month for a single user would be about $770 ($9,237/year). For 2 users, the monthly cost would be $1130 ($13,570/year), etc. The full estimate can be &lt;a href="https://calculator.aws/#/estimate?id=ecbba8c6713281bc419c70de414d8a1db19dd345">found here&lt;/a>.&lt;/p>
&lt;p>We are assuming 8 hours of tracing per day, 5 days a week. If the system is not used for 8 hours a day, the cost will be less. You can dial in your own expected usage in the &lt;a href="https://calculator.aws/#/estimate?id=ecbba8c6713281bc419c70de414d8a1db19dd345">AWS calculator&lt;/a> for an accurate cost estimate.&lt;/p></description></item><item><title>Docs: Deployment</title><link>https://hortacloud.janelia.org/docs/administration/aws/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hortacloud.janelia.org/docs/administration/aws/deployment/</guid><description>
&lt;p>The deployment uses AWS CDK to create AWS resources on your AWS account as shown in the diagram below. All services run in a secured Virtual Private Cloud (VPC).&lt;/p>
&lt;a href="../cloud_architecture.png">
&lt;img
src="../cloud_architecture.png"
class="rounded mx-auto"
style="max-width: 800px;"
alt="cloud architecture diagram"/>
&lt;/a>
&lt;h2 id="install-prerequisites">Install prerequisites&lt;/h2>
&lt;p>You should have &lt;strong>node v14&lt;/strong> installed on your local machine. We recommend using &lt;a href="https://github.com/nvm-sh/nvm">nvm&lt;/a> to install and activate this version of node.&lt;/p>
&lt;ul>
&lt;li>Install AWS CLI
&lt;ul>
&lt;li>AWS CDK requires AWS CLI to be installed and configured on the computer from which one runs the deployment procedure. &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">Installation&lt;/a> &amp;amp; &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">configuration&lt;/a> instructions can be found in the AWS documentation.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="get-the-deployment-scripts">Get the deployment scripts&lt;/h2>
&lt;p>Clone the &lt;a href="https://github.com/JaneliaSciComp/hortacloud">HortaCloud GitHib repository&lt;/a> containing the deployment scripts:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/JaneliaSciComp/hortacloud/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> hortacloud
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install the dependencies:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm run setup -- -i
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will install all packages that are needed to run the deployment procedure. The &amp;lsquo;-i&amp;rsquo; flag will tell the setup script to install npm packages for all application modules: cognito_stack, vpc_stack, workstation_stack and admin_api_stack. If you do not specify the &amp;lsquo;-i&amp;rsquo; flag, the command will only check the .env file and create it in case it&amp;rsquo;s missing. Notice how the &amp;lsquo;-i&amp;rsquo; flag is preceded by two hyhens &amp;lsquo;&amp;ndash;&amp;rsquo; - this is specific to npm not to cdk, so all script specific flags must be after the double hyphen separator.&lt;/p>
&lt;h2 id="configure-environment">Configure environment&lt;/h2>
&lt;p>The following values must be set in the &lt;code>.env&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AWS_REGION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;your aws region&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AWS_ACCOUNT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;your aws account&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">HORTA_ORG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;app qualifier name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ADMIN_USER_EMAIL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;admin email&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">JACS_JWT_KEY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;a 32 byte jwt secret&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">JACS_MONGO_KEY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;a 32 byte mongo secret&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">JACS_APP_PASSWD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;app password&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">RABBITMQ_PASSWD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;rabbitmq password&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">JACS_API_KEY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;jacs api key&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">JADE_API_KEY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;jade api key&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">HORTA_DATA_BUCKETS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;s3 buckets that hold MouseLight data&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The api keys and secrets have been randomly generated during the setup step, but you can generate new ones with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>openssl rand -hex &lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We prefer this procedure because these values will be handled during the installation using the &lt;code>sed&lt;/code> command and it is preferable that they not contain any characters that require escaping in a sed command.&lt;/p>
&lt;p>If you already have data on some S3 buckets you can add them to &lt;code>HORTA_DATA_BUCKETS&lt;/code> as a comma separated list. For example, if you want to use Janelia&amp;rsquo;s Open Data bucket but in addition you also have your data on a private bucket (&amp;lsquo;janelia-mouselight-demo&amp;rsquo; in this example) you need to set &lt;code>HORTA_DATA_BUCKETS=&amp;quot;janelia-mouselight-imagery,janelia-mouselight-demo&amp;quot;&lt;/code>. By default, only the MouseLight Open Data bucket is mounted. Every bucket specified in the &amp;lsquo;HORTA_DATA_BUCKETS&amp;rsquo; list will be available in Horta as &lt;code>/s3data/&amp;lt;s3BucketName&amp;gt;&lt;/code> directory.&lt;/p>
&lt;p>If you want to change the setting for &lt;code>HORTA_WS_INSTANCE_TYPE&lt;/code>, keep in mind that you may have to change &lt;code>HORTA_WS_IMAGE_NAME&lt;/code>.&lt;/p>
&lt;p>For &lt;code>HORTA_WS_INSTANCE_TYPE&lt;/code> set to any &lt;code>stream.graphics.g4dn.*&lt;/code> instances:&lt;/p>
&lt;ul>
&lt;li>&lt;code>stream.graphics.g4dn.xlarge&lt;/code>&lt;/li>
&lt;li>&lt;code>stream.graphics.g4dn.2xlarge&lt;/code>&lt;/li>
&lt;li>&lt;code>stream.graphics.g4dn.4xlarge&lt;/code>&lt;/li>
&lt;li>&lt;code>stream.graphics.g4dn.8xlarge&lt;/code>&lt;/li>
&lt;li>&lt;code>stream.graphics.g4dn.12xlarge&lt;/code>&lt;/li>
&lt;li>&lt;code>stream.graphics.g4dn.16xlarge&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>use: &lt;code>HORTA_WS_IMAGE_NAME=AppStream-Graphics-G4dn-WinServer2019-09-01-2022&lt;/code> image.&lt;/p>
&lt;p>For &lt;code>HORTA_WS_INSTANCE_TYPE&lt;/code> set to any &lt;code>stream.graphics-pro.*&lt;/code> instances:&lt;/p>
&lt;ul>
&lt;li>&lt;code>stream.graphics-pro.4xlarge&lt;/code>&lt;/li>
&lt;li>&lt;code>stream.graphics-pro.8xlarge&lt;/code>&lt;/li>
&lt;li>&lt;code>stream.graphics-pro.16xlarge&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>use &lt;code>HORTA_WS_IMAGE_NAME=AppStream-Graphics-Pro-WinServer2019-09-01-2022&lt;/code> image&lt;/p>
&lt;p>Note: AWS deprecates the AppStream images relatively frequently so please make sure you use an AppStream-Graphics image that is available on AWS. You can see the available images from the AWS console if you select the &amp;ldquo;AppStream 2.0&amp;rdquo; service and then search &amp;ldquo;Images &amp;gt; Image Registry&amp;rdquo;&lt;/p>
&lt;h2 id="configure-aws-account">Configure AWS account&lt;/h2>
&lt;h3 id="iam-required-roles">IAM Required Roles&lt;/h3>
&lt;p>In order to create an AppStream Image Builder, which is needed to create the Workstation Image, you need to have all &lt;a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/roles-required-for-appstream.html">roles required by AppStream&lt;/a>. Check that by simply connecting to the AWS console and check if the Roles are available in the IAM Service - select &amp;ldquo;Services&amp;rdquo; &amp;gt; &amp;ldquo;Security, Identity, Compliance&amp;rdquo; &amp;gt; &amp;ldquo;IAM&amp;rdquo; then verify that the required roles are present:&lt;/p>
&lt;ul>
&lt;li>AmazonAppStreamServiceAccess&lt;/li>
&lt;li>ApplicationAutoScalingForAmazonAppStreamAccess&lt;/li>
&lt;li>AWSServiceRoleForApplicationAutoScaling_AppStreamFleet&lt;/li>
&lt;/ul>
&lt;h3 id="aws-limits">AWS Limits&lt;/h3>
&lt;p>Most AWS services allow you to setup restrictions on the number of active instances. The default limits, especially for some AppStream resources, such as &amp;ldquo;Maximum ImageBuilders&amp;rdquo; for some graphics instances - &amp;ldquo;stream.graphics.g4dn.xlarge&amp;rdquo; may be really low (0 in some cases). Connect to AWS console &amp;ldquo;Service Quotas&amp;rdquo; service and increase the limit for in case you see a &lt;code>limit was exceeded&lt;/code> error. Typically take a look at the limits setup for your account for EC2, VPC, AppStream, S3. Keep in mind that limits may be different from instance type to instance type for AppStream service, so you may have to adjust the limits based on the AppStream instance type selection.&lt;/p>
&lt;h2 id="deploy-hortacloud-services">Deploy HortaCloud services&lt;/h2>
&lt;p>After the setup is complete, deploy the application by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm run deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First time the application is deployed we also need to create user login pool and this must be explicitly specified using &amp;lsquo;-u&amp;rsquo; flag [See &lt;strong>Deploy the user login stack&lt;/strong> section below]:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm run deploy -- -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are a few steps during the deployment that require manual intervention. The deploy script will indicate when these steps should be taken with a ⚠️ warning message.&lt;/p>
&lt;p>The full deployment of the application is done in 3, or 4 steps - if user login stack is deployed too, that run automatically one after the other,
with some manual intervention for &lt;strong>AppStream builder&lt;/strong> step (third step outlined below):&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Deploy the user login stack&lt;/strong> - this step is optional and practically is only needed first time the application is deployed. To create the user login stack you need to pass in &amp;lsquo;-u&amp;rsquo; flag to the deploy command (&lt;code>npm run deploy -- -u&lt;/code>) which will automatically create a Cognito user pool and the &amp;lsquo;admin&amp;rsquo; user and &amp;lsquo;admins&amp;rsquo; group. You also have an option to import cognito users from a backup (&lt;code>npm run deploy -- -u \ -r -b janelia-mouselight-demo -f hortacloud/backups/20220511030001/cognito&lt;/code>) but in this case you may need to skip the creation of the default admin user and group.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Deploy the back-end stacks&lt;/strong> - this includes the AppStream builder. At the back end deployment the installation process will also create the admin user configured in &lt;code>ADMIN_USER_EMAIL&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Connect to AppStream builder and install the Horta application&lt;/strong> - This is a semiautomated step that involves copying and running two PowerShell scripts onto the AppStream builder instance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Deploy the administration stack.&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="install-the-horta-desktop-application">Install the Horta desktop application&lt;/h3>
&lt;p>For client installation start and connect to the AppStream builder instance then copy the following scripts from this repo to the AppStream instance:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/JaneliaSciComp/hortacloud/blob/main/vpc_stack/src/asbuilder/installcmd.ps1">installcmd.ps1&lt;/a> - installs JDK and the Horta application&lt;/li>
&lt;li>&lt;a href="https://github.com/JaneliaSciComp/hortacloud/blob/main/vpc_stack/src/asbuilder/createappimage.ps1">createappimage.ps1&lt;/a> - creates the AppStream image&lt;/li>
&lt;/ul>
&lt;p>After you copied or created the scripts:&lt;/p>
&lt;ul>
&lt;li>Log in to the AWS console and go to &lt;a href="https://console.aws.amazon.com/appstream2">https://console.aws.amazon.com/appstream2&lt;/a>&lt;/li>
&lt;li>Find your new builder in the &amp;ldquo;Images &amp;gt; Image Builder&amp;rdquo; tab&lt;/li>
&lt;li>Click on the image name and open an &amp;ldquo;Administrator&amp;rdquo; window by clicking on the &amp;ldquo;Connect&amp;rdquo; button.&lt;/li>
&lt;li>Copy the installation scripts from your local machine to AppStream:
&lt;ul>
&lt;li>Click on the folder icon at the top left of the window&lt;/li>
&lt;li>Select the &lt;code>Temporary Files&lt;/code> folder&lt;/li>
&lt;li>Use the &lt;code>Upload Files&lt;/code> icon to find the files on your machine and upload them.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Open the powershell by typing &amp;ldquo;`Power shell&amp;rdquo; in the search found at the bottom left of the window. This step used to require an &amp;ldquo;Administrator Power Shell&amp;rdquo; but now it needs only a regular user power shell and it may actually fail the install if you run it in an Administrator Power Shell.&lt;/li>
&lt;li>Change to the directory where you uploaded the installation scripts, eg:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;C:\Users\ImagebuilderAdmin\My Files\Temporary Files&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Run the installcmd script to install Horta. &amp;lt;serverName&amp;gt; is the name of the backend EC2 instance, typically it looks like &lt;code>ip-&amp;lt;ip4 with dashes instead of dots&amp;gt;.ec2.internal&lt;/code>. Instructions for locating this are provided as output from the installer script. The Horta client certificate is signed using the ec2 internal name so do not use the actual IP for the &amp;lt;serverName&amp;gt; parameter, because user logins will fail with a certificate error.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">installcmd&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ps1&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">serverName&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will install the JDK and Horta. The installer will run silently and it will install the Horta application under the &lt;code>C:\apps&lt;/code> folder. If it prompts you for the install directory, select &lt;code>C:\apps&lt;/code> as the JaneliaWorkstation location.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Optional&lt;/em> - To start Horta for testing, run:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">c:&lt;/span>&lt;span style="color:#000;font-weight:bold">\&lt;/span>&lt;span style="color:#000">apps&lt;/span>&lt;span style="color:#000;font-weight:bold">\&lt;/span>&lt;span style="color:#000">runJaneliaWorkstation&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ps1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>when prompted, login as the admin user you set in ADMIN_USER_EMAIL (leave the password empty)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigate through the menus to make sure Horta is working. &lt;em>Do not create any user accounts at this time as they will get created from the Admin web application.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When testing is finished, close down Horta.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finalize the creation of the AppStream image, run:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">createappimage&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ps1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keep in mind that once you start this step the builder instance begins the snap shotting process and it will not be usable until it completes. After this is completed the AppStream image should be available and the builder will be in a stop state. To use it again you need to start it and then you can connect.&lt;/p>
&lt;ul>
&lt;li>You can now safely close the AppStream session and return to the AppStream console. There you will see a new image in the image registry with a status of &lt;code>Pending&lt;/code>.&lt;/li>
&lt;li>Once the image status has changed to a status of &lt;code>Available&lt;/code> you can start the fleet by going to the &lt;code>Fleets&lt;/code> page on the AppStream site.
&lt;ul>
&lt;li>Select your fleet from the list of fleets and then select &amp;lsquo;Start&amp;rsquo; from the &lt;code>Action&lt;/code> menu.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>At this point the installation script you started on your host machine, should continue to completion.&lt;/li>
&lt;/ul>
&lt;h2 id="customizing-the-portal-url">Customizing the portal URL&lt;/h2>
&lt;p>By default the application will have a very long url that is not easy to remember, something like:
&lt;a href="http://janelia-hortacloudwebapp-janeliahortacloudwebadmi-yefcny29t8n6.s3-website-us-east-1.amazonaws.com/">http://janelia-hortacloudwebapp-janeliahortacloudwebadmi-yefcny29t8n6.s3-website-us-east-1.amazonaws.com/&lt;/a>. Follow these instructions to create a shorter domain for use with your installation.&lt;/p>
&lt;ul>
&lt;li>Register a domain with Route53 or your domain provider.
&lt;ul>
&lt;li>The Route53 page in the AWS console has a &amp;ldquo;Register domain&amp;rdquo; form.&lt;/li>
&lt;li>Alternative providers can also be used, but it requires a little more work.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Purchase an SSL certificate for your domain.
&lt;ul>
&lt;li>This can be done with &lt;a href="https://aws.amazon.com/certificate-manager/">AWS Certificate Manager&lt;/a>&lt;/li>
&lt;li>or an external certificate provider, often it can be done with the same company that provided your domain registration. Use the &amp;ldquo;Import a certificate&amp;rdquo; button to register your certificate with AWS.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use the &amp;ldquo;Create distribution&amp;rdquo; button on the CloudFront console to attach your registered domain to the s3 bucket that hosts the admin portal.
&lt;ul>
&lt;li>the only things that need to be changed from the defaults are
&lt;ul>
&lt;li>&amp;ldquo;Origin domain&amp;rdquo; - this should be the domain that was originally generated for your admin portal.
eg: &lt;em>janelia-hortacloudwebapp-janeliahortacloudwebadmi-yefcny29t8n6.s3-website-us-east-1.amazonaws.com&lt;/em>&lt;/li>
&lt;li>&amp;ldquo;Viewer protocol policy&amp;rdquo; - Change this to &amp;ldquo;Redirect HTTP to HTTPS&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Custom SSL certificate&amp;rdquo; - Select the certificate that you registered with AWS Certificate Manager&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Finally, click the &amp;ldquo;Create distribution&amp;rdquo; button.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="uninstalling-hortacloud-services">Uninstalling HortaCloud services&lt;/h2>
&lt;p>To completely uninstall the application run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm run destroy -- -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command will uninstall all stacks including the user logins (Cognito) stack.&lt;/p>
&lt;p>Note in the previous &lt;a href="#Upgrading_HortaCloud_services_to_AWS">system upgrade section&lt;/a> that an upgrade typically does not require removing and recreating the user pool stack.&lt;/p>
&lt;h2 id="troubleshooting">Troubleshooting&lt;/h2>
&lt;h3 id="troubleshooting-client-app-installation">Troubleshooting client app installation&lt;/h3>
&lt;p>If the client app installation fails for any reason, before you attempt the install again you must remove everything that was installed by the install script. Uninstall all applications installed with scoop and remove the &amp;lsquo;C:\apps&amp;rsquo; folder. To do that run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">scoop&lt;/span> &lt;span style="color:#000">uninstall&lt;/span> &lt;span style="color:#000">scoop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">del &lt;/span>&lt;span style="color:#000">c:&lt;/span>&lt;span style="color:#000;font-weight:bold">\&lt;/span>&lt;span style="color:#000">apps&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When prompted whether you really want to uninstall everything, select &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;all&amp;rdquo;.&lt;/p></description></item><item><title>Docs: Backup &amp; Restore</title><link>https://hortacloud.janelia.org/docs/administration/aws/backups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hortacloud.janelia.org/docs/administration/aws/backups/</guid><description>
&lt;h2 id="system-backup">System backup&lt;/h2>
&lt;p>The system can be configured to take nightly backups. All it is needed is to specify a writeable bucket (&lt;code>HORTA_BACKUP_BUCKET&lt;/code>) that will hold the backups. You can also specify the base prefix for the backups using &lt;code>HORTA_BACKUP_FOLDER&lt;/code>. If this is not specified the prefix will default to &amp;ldquo;/hortacloud/backups&amp;rdquo;.&lt;/p>
&lt;p>Currently the backup contains the Cognito users and the Mongo database (user-generated metadata and tracing data). Each backup will be stored in a timestamp (with format &amp;ldquo;yyyyMMddHHmmss&amp;rdquo;) folder under the base backup prefix. The location of the backups will be &lt;code>s3://&amp;lt;backup_bucket&amp;gt;/&amp;lt;backup_folder_prefix&amp;gt;/&amp;lt;timestamp&amp;gt;/jacs&lt;/code> for the database and &lt;code>s3://&amp;lt;backup_bucket&amp;gt;/&amp;lt;backup_folder_prefix&amp;gt;/&amp;lt;timestamp&amp;gt;/cognito&lt;/code> for cognito users.&lt;/p>
&lt;p>The backup is configured as a cron job that runs daily at 3 AM local time on the EC2 host on which the backend services run.&lt;/p>
&lt;h2 id="system-restore">System restore&lt;/h2>
&lt;p>If system backups are available, the sample and tracing data can be restored by specifying a specified backup bucket (&lt;code>HORTA_RESTORE_BUCKET&lt;/code>) and prefix (&lt;code>HORTA_RESTORE_FOLDER&lt;/code>) which typically was created by the nightly backup job.&lt;/p></description></item><item><title>Docs: Upgrading</title><link>https://hortacloud.janelia.org/docs/administration/aws/upgrading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hortacloud.janelia.org/docs/administration/aws/upgrading/</guid><description>
&lt;p>There are two ways to upgrade to a new version of the code: &lt;a href="#full-upgrade">Full Upgrade&lt;/a> and &lt;a href="#incremental-upgrade">Incremental Upgrade&lt;/a>.&lt;/p>
&lt;h2 id="full-upgrade">Full Upgrade&lt;/h2>
&lt;p>This method backs up all of the data, removes the existing HortaCloud stack, installs a new version from scratch, and restores the data. This is currently the most automated way to upgrade, and requires the least amount of effort.&lt;/p>
&lt;h3 id="backup-your-data">Backup your data&lt;/h3>
&lt;p>First, ensure that you have a recent data backup. If you have not &lt;a href="../backups">configured backups&lt;/a>, do that first. For most upgrades, you only need to check if a backup for the JACS Mongo database exists. Typically this is located at &lt;code>s3://&amp;lt;HORTA_BACKUP_BUCKET value&amp;gt;/&amp;lt;HORTA_BACKUP_FOLDER value&amp;gt;/&amp;lt;timestamp&amp;gt;/jacs&lt;/code>&lt;/p>
&lt;h3 id="remove-hortacloud-environment">Remove HortaCloud environment&lt;/h3>
&lt;p>To remove the current HortaCloud environment run this command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm run destroy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will uninstall the frontend and the backend AWS Cloudformation stacks, i.e., Admin, Appstream and JACS stacks, but it will not uninstall Cognito stack, so no user accounts will be removed.&lt;/p>
&lt;h3 id="deploy-new-version-of-hortacloud">Deploy new version of HortaCloud&lt;/h3>
&lt;p>The next step is to upgrade the local git repo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git pull
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should also check out a specific version tag that you want to deploy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git checkout &amp;lt;version&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to restore the database from an existing backup make sure the following properties are set:&lt;/p>
&lt;pre tabindex="0">&lt;code>HORTA_RESTORE_BUCKET=&amp;lt;backup bucket name&amp;gt;
HORTA_RESTORE_FOLDER=&amp;#34;/hortacloud/backups/latest&amp;#34;
&lt;/code>&lt;/pre>&lt;p>HORTA_RESTORE_BUCKET is the name of the backup bucket and HORTA_RESTORE_FOLDER must reference the parent prefix containing the &amp;lsquo;jacs&amp;rsquo; folder - the location of the actual mongo backup. Typically the backup job creates a &amp;ldquo;softlink&amp;rdquo; - &amp;ldquo;/hortacloud/backups/latest&amp;rdquo; so if you simply set the restore folder to that it should pick up the latest backup. If the backup was a manual backup or you need to restore to a previous date set the restore folder to that folder. For example setting &lt;code>HORTA_RESTORE_FOLDER=/hortacloud/backups/20220609030001&lt;/code> will restore the database to the content saved on Jun 9, 2022.&lt;/p>
&lt;p>After setting these properties you can proceed with the actual deploy procedure which will only install the backend and the frontend stack (skipping any Cognito installation):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm run deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From here on, this approach is identical with the initial deployment, with the only exception that data and users should already exist once the backend stack is fully deployed.&lt;/p>
&lt;p>After you start the deploy command, follow the instructions you see on the screen which will prompt you when you need to setup the AppStream Builder exactly as it is described in the &lt;a href="#workstation-app-installation">Workstation app-installation section&lt;/a>&lt;/p>
&lt;p>If somehow you need to recreate the user login accounts because you inadvertently removed the Cognito stack as well (e.g. using &lt;code>-u&lt;/code> flag) you can restore all the accounts from a previous backup using the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm run deploy -- -u -r -b &amp;lt;backup bucket&amp;gt; -f hortacloud/backups/manual-backup/cognito
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The folder parameter must point to the actual cognito prefix, where &amp;lsquo;users.json&amp;rsquo; and &amp;lsquo;groups.json&amp;rsquo; are located&lt;/p>
&lt;h2 id="incremental-upgrade">Incremental Upgrade&lt;/h2>
&lt;p>Incremental approach requires more manual steps, but it does not require any data restore. It basically removes only the frontend stacks, i.e. Appstream and Admin App, and it requires a manual update of the backend stack and the workstation.&lt;/p>
&lt;p>The steps for the incremental approach are the following:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Remove only the frontend stacks:
&lt;code>npm run destroy -- -b&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>From the AWS console connect to the EC2 instance (&lt;code>&amp;lt;ORG&amp;gt;-hc-jacs-node-&amp;lt;STAGE&amp;gt;&lt;/code>) running the JACS stack using the &amp;ldquo;Session Manager&amp;rdquo;. To be more specific, from the EC2 instances page, select the instance &lt;code>&amp;lt;ORG&amp;gt;-hc-jacs-node-&amp;lt;STAGE&amp;gt;&lt;/code> and click on the &amp;ldquo;Connect&amp;rdquo; button. This will take you to the instance page, and then from there select the &amp;ldquo;Session Manager&amp;rsquo; tab and click the &amp;ldquo;Connect&amp;rdquo; button again. The &amp;ldquo;Connect&amp;rdquo; button should be enabled - if it&amp;rsquo;s not there either was a problem with the deployment or there might be a problem with the instance itself.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once connected run the following commands&lt;/p>
&lt;pre tabindex="0">&lt;code>cd /opt/jacs/deploy
./manage.sh compose down
sudo git pull origin stable
sudo git checkout &amp;lt;version&amp;gt;
./manage.sh compose up -d
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Start AppStream builder (&lt;code>&amp;lt;ORG&amp;gt;-hc-image-builder-&amp;lt;STAGE&amp;gt;&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect as Administrator&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check that &amp;lsquo;reinstallwsonly.ps1&amp;rsquo; script is available, in the Admin&amp;rsquo;s home directory. If not copy it from the application repo or just create it like the other install scripts, (&amp;lsquo;installcmd.ps1&amp;rsquo; and &amp;lsquo;createappimage.ps1&amp;rsquo;) were created on the initial deployment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run the reinstallwssonly.ps1 script:&lt;/p>
&lt;pre tabindex="0">&lt;code>.\reinstallwssonly.ps1 &amp;lt;IP of host running JACS stack&amp;gt;
&lt;/code>&lt;/pre>&lt;p>The IP of the host running JACS is the same used for initial run of &amp;lsquo;installcmd.ps1&amp;rsquo; and it can be found from the AWS console.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Try out the workstation application to make sure it works&lt;/p>
&lt;pre tabindex="0">&lt;code>C:\apps\runJaneliaWorkstation.ps1
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Make sure you have the latest &amp;lsquo;createappimage.ps1&amp;rsquo; script from the application git repository. If you don&amp;rsquo;t copy the latest script that supports &amp;lsquo;&amp;ndash;skip-registration&amp;rsquo; flag.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start the script for creating the AppStream image but skip the application registration: &lt;code>.\createappimage.ps1 --skip-registration&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reinstall the frontend stacks&lt;/p>
&lt;pre tabindex="0">&lt;code>npm run deploy -- --skip-vpc
&lt;/code>&lt;/pre>&lt;p>If no changes were made to the code AWS CDK will only update the missing stacks, leaving JACS stack as it was since it practically has not been changed from AWS&amp;rsquo; perspective&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Data Import</title><link>https://hortacloud.janelia.org/docs/administration/aws/data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hortacloud.janelia.org/docs/administration/aws/data/</guid><description>
&lt;h3 id="adding-the-mouselight-open-data">Adding the MouseLight Open Data&lt;/h3>
&lt;p>The MouseLight project at Janelia has made available the complete imagery and neuron tracing annotations for its published data sets on the &lt;a href="https://registry.opendata.aws/janelia-mouselight/">AWS Open Data Registry&lt;/a>.&lt;/p>
&lt;p>You can easily make these available in your own HortaCloud instance by &lt;a href="https://hortacloud.janelia.org/docs/user_manual/synchronized_folders/">creating a Synchronized Folder&lt;/a> which points to &lt;code>/s3data/janelia-mouselight-data&lt;/code>.&lt;/p>
&lt;h3 id="adding-a-single-volume">Adding a single volume&lt;/h3>
&lt;p>A Horta Sample is an object representing a single 3D volume that can be visualized and traced with Horta.&lt;/p>
&lt;p>If you already have the HortaKTX format data in your mounted S3 buckets, select &lt;strong>File&lt;/strong> → &lt;strong>New&lt;/strong> → &lt;strong>Horta Sample&lt;/strong>, and then set &amp;ldquo;Sample Name&amp;rdquo; to &lt;code>&amp;lt;sampleDirectoryName&amp;gt;&lt;/code> and &amp;ldquo;Path to Render Folder&amp;rdquo; as &lt;code>/s3data/&amp;lt;bucketName&amp;gt;/&amp;lt;sampleDirectoryName&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Open the Data Explorer (&lt;strong>Window&lt;/strong> → &lt;strong>Core&lt;/strong> → &lt;strong>Data Explorer&lt;/strong>) and navigate to Home, then &amp;ldquo;3D RawTile Microscope Samples&amp;rdquo;, and your sample name. Right-click the sample and choose &amp;ldquo;Open in Horta&amp;rdquo;. This will open the Horta Panel and then from the Horta Panel you have options to create a workspace or to open the 2D or the 3D volume viewer.&lt;/p>
&lt;h3 id="converting-your-data">Converting your data&lt;/h3>
&lt;p>If your data has not been converted into HortaKTX format, you can use the &lt;a href="https://github.com/JaneliaSciComp/hortacloud-importer">HortaCloud Data Importer&lt;/a> to convert it. This tool supports many common image formats, and can be easily extended in Python to support your favorite format.&lt;/p></description></item><item><title>Docs: Troubleshooting</title><link>https://hortacloud.janelia.org/docs/administration/aws/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hortacloud.janelia.org/docs/administration/aws/troubleshooting/</guid><description>
&lt;h2 id="no-user-can-login-to-the-workstation">No user can login to the workstation&lt;/h2>
&lt;p>We have seen this behavior if the &amp;ldquo;/data&amp;rdquo; volume ran out of space. You can check this by connecting to the EC2 instance running the JACS stack and running &lt;code>df -h /data&lt;/code>.&lt;/p>
&lt;p>If the disk is full you, you can try to find anything that could be removed but if the limit was reached because the size your data you really have to resize the volume. The steps to resize an EBS volume can be found in the AWS documentation. First run &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/requesting-ebs-volume-modifications.html">the instructions to increase the size of and EBS volume&lt;/a> and then &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html">the instructions that make the entire new disk space available to the EC2 instance&lt;/a>&lt;/p>
&lt;p>If users still cannot use the workstation for tracing, after the &lt;code>/data&lt;/code> volume was resized, and there is plenty of disk space available, the reason might be that RabbitMQ failed to start properly, which may happen if RabbitMQ runs out of disk space. Users can also inspect the log from the workstation and look for errors like:&lt;/p>
&lt;pre tabindex="0">&lt;code>java.lang.IllegalStateException: Message connection could not be opened to host &amp;lt;hostip&amp;gt; after &amp;lt;n&amp;gt; attempts
&lt;/code>&lt;/pre>&lt;p>If this is case check the size of the file &lt;code>/data/db/rabbitmq/jacs/mnesia/rabbit\@jacs-rabbit/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/recovery.dets&lt;/code> If the file exists and its size is 0 then remove the file and restart the entire stack.&lt;/p></description></item></channel></rss>