[{"body":"HortaCloud is a streaming 3D annotation platform for large microscopy data that runs entirely in the cloud. It is a free, open source research software tool, developed by Janelia Research Campus.\nIt combines state-of-the-art volumetric visualization, advanced features for 3D neuronal annotation, and real-time multi-user collaboration with a set of enterprise-grade backend microservices for moving and processing large amounts of data rapidly and securely. HortaCloud takes advantage of cloud-based Virtual Desktop Infrastructure (VDI) to perform all 3D rendering in cloud-leased GPUs which are data-adjacent, and only transfer a high-fidelity interactive video stream to each annotator’s local compute platform through a web browser.\n  What is it good for?: HortaCloud is a powerful tool for 3D visualization and annotation of large-scale microscopy data. It has been used to trace axons across the entire mouse brain by Janelia’s MouseLight Team Project.\n  What is it not good for?: HortaCloud is a very specialized tool for sparse microscopy data. It is not intended for annotation of dense data sets, such as electron microscopy (EM) imagery.\n  What makes HortaCloud unique?: Leveraging state-of-the-art services on AWS allows HortaCloud to run entirely in the cloud, making it possible to visualize terabyte-scale 3D volumes without moving all of that data over the Internet (see diagram below).\n   Where should I go next? If you are a HortaCloud user, read through the User Manual to get familiar with the tools.\nIf you are a system administrator or developer looking to deploy an instance of HortaCloud, start with the AWS Deployment Guide.\n","categories":"","description":"What is HortaCloud?\n","excerpt":"What is HortaCloud?\n","ref":"/docs/overview/","tags":"","title":"Overview"},{"body":" Coming soon! We’re working on migrating our user manual here. For now you can read the PDF of the Horta user manual.\n ","categories":"","description":"How to use the HortaCloud application\n","excerpt":"How to use the HortaCloud application\n","ref":"/docs/user_manual/","tags":"","title":"User manual"},{"body":"HortaCloud is easily deployed on Amazon Web Services (AWS) using the AWS CDK to automatically provision resources.\n","categories":"","description":"Learn how to deploy and operate your own HortaCloud instance on AWS\n","excerpt":"Learn how to deploy and operate your own HortaCloud instance on AWS\n","ref":"/docs/administration/aws/","tags":"","title":"AWS"},{"body":"The deployment uses AWS CDK to create AWS resources on your AWS account as shown in the diagram below. All services run in a secured Virtual Private Cloud (VPC).\n Install prerequisites You should have node v14 installed on your local machine. We recommend using nvm to install and activate this version of node.\n  Install AWS CLI\n AWS CDK requires AWS CLI to be installed and configured on the computer from which one runs the deployment procedure. Installation \u0026 configuration instructions can be found in the AWS documentation.    Install AWS CDK by running\n  npm install This command will install CDK in your development environment so you can access its help as below (notice the ‘–’ separator between cdk and cdk options - this is specific to npm not to cdk so all CDK flags must be after the double hyphen separator):\nnpm run cdk -- --help Get the deployment scripts Clone the HortaCloud GitHib repository containing the deployment scripts:\ngit clone https://github.com/JaneliaSciComp/hortacloud/ cd hortacloud Install the dependencies:\nnpm run setup Configure environment The following values must be set in the .env file:\nAWS_REGION=\u003cyour aws region\u003e AWS_ACCOUNT=\u003cyour aws account\u003e HORTA_ORG=\u003capp qualifier name\u003e ADMIN_USER_EMAIL=\u003cadmin email\u003e JACS_JWT_KEY=\u003ca 32 byte jwt secret\u003e JACS_MONGO_KEY=\u003ca 32 byte mongo secret\u003e JACS_APP_PASSWD=\u003capp password\u003e RABBITMQ_PASSWD=\u003crabbitmq password\u003e JACS_API_KEY=\u003cjacs api key\u003e JADE_API_KEY=\u003cjade api key\u003e HORTA_DATA_BUCKETS=\u003cs3 buckets that hold MouseLight data\u003e The api keys and secrets have been randomly generated during the setup step, but you can generate new ones with the following command:\nopenssl rand -hex 32 We prefer this procedure because these values will be handled during the installation using the sed command and it is preferable that they not contain any characters that require escaping in a sed command.\nIf you already have data on some S3 buckets you can add them to HORTA_DATA_BUCKETS as a comma separated list. For example, if you want to use Janelia’s Open Data bucket but in addition you also have your data on a private bucket (‘janelia-mouseligh-demo’ in this example) you need to set HORTA_DATA_BUCKETS=\"janelia-mouselight-imagery,janelia-mouselight-demo\". Currently it is set to Janelia’s open data MouseLight bucket only. Every bucket specified in the ‘HORTA_DATA_BUCKETS’ list will be available in the workstation as /\u003cs3BucketName\u003e directory.\nIf you want to change the setting for HORTA_WS_INSTANCE_TYPE, keep in mind that you may have to change HORTA_WS_IMAGE_NAME For HORTA_WS_INSTANCE_TYPE set to any stream.graphics.g4dn.* instances:\n stream.graphics.g4dn.xlarge stream.graphics.g4dn.2xlarge stream.graphics.g4dn.4xlarge stream.graphics.g4dn.8xlarge stream.graphics.g4dn.12xlarge stream.graphics.g4dn.16xlarge  use: HORTA_WS_IMAGE_NAME=AppStream-Graphics-G4dn-WinServer2019-07-19-2021 image.\nFor HORTA_WS_INSTANCE_TYPE set to any stream.graphics-pro.* instances:\n stream.graphics-pro.4xlarge stream.graphics-pro.8xlarge stream.graphics-pro.16xlarge  use HORTA_WS_IMAGE_NAME=AppStream-Graphics-Pro-WinServer2019-10-08-2021 image\nConfigure AWS account IAM Required Roles In order to create an AppStream Image Builder, which is needed to create the Workstation Image, you need to have all roles required by AppStream. Check that by simply connecting to the AWS console and check if the Roles are available in the IAM Service - select “Services” \u003e “Security, Identity, Compliance” \u003e “IAM” then verify that the required roles are present:\n AmazonAppStreamServiceAccess ApplicationAutoScalingForAmazonAppStreamAccess AWSServiceRoleForApplicationAutoScaling_AppStreamFleet  AWS Limits Most AWS services allow you to setup restrictions on the number of active instances. The default limits, especially for some AppStream resources, such as “Maximum ImageBuilders” for some graphics instances - “stream.graphics.g4dn.xlarge” may be really low (0 in some cases). Connect to AWS console “Service Quotas” service and increase the limit for in case you see a limit was exceeded error. Typically take a look at the limits setup for your account for EC2, VPC, AppStream, S3. Keep in mind that limits may be different from instance type to instance type for AppStream service, so you may have to adjust the limits based on the AppStream instance type selection.\nDeploy HortaCloud services to AWS After the setup is complete, deploy the application by running:\nnpm run deploy There are a few steps during the deployment that require manual intervention. The deploy script will indicate when these steps should be taken with a ⚠️ warning message.\nThe full deployment of the application is done in 3 steps run automatically one after the other, but the second step requires manual intervention:\n  Deploy the back-end stacks - this includes the AppStream builder. At the back end deployment the installation process will also create the admin user configured in ADMIN_USER_EMAIL.\n  Connect to AppStream builder and install the workstation application - This is a semiautomated step that involves copying and running two PowerShell scripts onto the AppStream builder instance.\n  Deploy the user login and administration stack.\n  Workstation app installation For client installation start and connect to the AppStream builder instance then copy the following scripts from this repo to the AppStream instance:\n installcmd.ps1 - installs JDK and the workstation createappimage.ps1 - creates the AppStream image  After you copied or created the scripts:\n Log in to the AWS console and go to https://console.aws.amazon.com/appstream2 Find your new builder in the “Images \u003e Image Builder” tab Click on the image name and open an “Administrator” window by clicking on the “Connect” button. Copy the installation scripts from your local machine to AppStream:  Click on the folder icon at the top left of the window Select the Temporary Files folder Use the Upload Files icon to find the files on your machine and upload them.   Open the powershell by typing “`Power shell” in the search found at the bottom left of the window. This step used to require an “Administrator Power Shell” but now it needs only a regular user power shell and it may actually fail the install if you run it in an Administrator Power Shell. Change to the directory where you uploaded the installation scripts, eg:  cd 'C:\\Users\\ImagebuilderAdmin\\My Files\\Temporary Files'  Run the installcmd script to install the workstation. \u003cserverName\u003e is the name of the backend EC2 instance, typically it looks like ip-\u003cip4 with dashes instead of dots\u003e.ec2.internal. Instructions for locating this are provided as output from the installer script.  installcmd.ps1 \u003cserverName\u003e This will install the JDK and the workstation. The installer will run silently and it will install the workstation under the C:\\apps folder. If it prompts you for the install directory, select C:\\apps as the JaneliaWorkstation location.\n Optional - To start the workstation for testing, run:  c:\\apps\\runJaneliaWorkstation.ps1   when prompted, login as the admin user you set in ADMIN_USER_EMAIL (leave the password empty)\n  Navigate through the menus to make sure the workstation is working. Do not create any user accounts at this time as they will get created from the Admin web application.\n  When testing is finished, close down the workstation.\n  Finalize the creation of the AppStream image, run:\n  createappimage.ps1 Keep in mind that once you start this step the builder instance begins the snap shotting process and it will not be usable until it completes. After this is completed the AppStream image should be available and the builder will be in a stop state. To use it again you need to start it and then you can connect.\n  You can now safely close the AppStream session and return to the AppStream console. There you will see a new image in the image registry with a status of Pending.\n  Once the image status has changed to a status of Available you can start the fleet by going to the Fleets page on the AppStream site.\n Select your fleet from the list of fleets and then select ‘Start’ from the Action menu.    At this point the installation script you started on your host machine, should continue to completion.\n  Customizing the portal URL By default the application will have a very long url that is not easy to remember, something like: http://janelia-hortacloudwebapp-janeliahortacloudwebadmi-yefcny29t8n6.s3-website-us-east-1.amazonaws.com/. Follow these instructions to create a shorter domain for use with your installation.\n  Register a domain with Route53 or your domain provider.\n The Route53 page in the AWS console has a “Register domain” form. Alternative providers can also be used, but it requires a little more work.    Purchase an SSL certificate for your domain.\n This can be done with AWS Certificate Manager or an external certificate provider, often it can be done with the same company that provided your domain registration. Use the “Import a certificate” button to register your certificate with AWS.    Use the “Create distribution” button on the CloudFront console to attach your registered domain to the s3 bucket that hosts the admin portal.\n the only things that need to be changed from the defaults are  “Origin domain” - this should be the domain that was originally generated for your admin portal. eg: janelia-hortacloudwebapp-janeliahortacloudwebadmi-yefcny29t8n6.s3-website-us-east-1.amazonaws.com “Viewer protocol policy” - Change this to “Redirect HTTP to HTTPS” “Custom SSL certificate” - Select the certificate that you registered with AWS Certificate Manager   Finally, click the “Create distribution” button.    Troubleshooting Troubleshooting client app installation If the client app installation fails for any reason, before you attempt the install again you must remove everything that was installed by the install script. Uninstall all applications installed with scoop and remove the ‘C:\\apps’ folder. To do that run:\nscoop uninstall scoop del c:\\apps When prompted whether you really want to uninstall everything, select “yes” or “all”.\n","categories":"","description":"How to deploy HortaCloud to your own AWS account\n","excerpt":"How to deploy HortaCloud to your own AWS account\n","ref":"/docs/administration/aws/deployment/","tags":"","title":"Deployment"},{"body":"","categories":"","description":"Getting started with HortaCloud development\n","excerpt":"Getting started with HortaCloud development\n","ref":"/docs/development/gettingstarted/","tags":"","title":"Getting started"},{"body":"The recommended way to deploy HortaCloud is to use Amazon Web Services (AWS).\n","categories":"","description":"How to deploy and administer the HortaCloud system\n","excerpt":"How to deploy and administer the HortaCloud system\n","ref":"/docs/administration/","tags":"","title":"Administration guide"},{"body":"The recommended way to deploy HortaCloud is to use Amazon Web Services (AWS), but you can also deploy the Horta services locally on your own client/server machines.\nUsing Docker Swarm, you can choose to deploy on two or three servers. The primary benefit of using three servers is that the MongoDB cluster will have a complete replica set for high availability.\n","categories":"","description":"Learn how to deploy a Horta instance on your own servers\n","excerpt":"Learn how to deploy a Horta instance on your own servers\n","ref":"/docs/administration/bare_metal/","tags":"","title":"Bare metal"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/","tags":"","title":"Documentation"},{"body":"  This document describes a Janelia Workstation deployment intended for setting up a personal development environment. Unlike the canonical distributed deployments which use Docker Swarm, this deployment uses Docker Compose to orchestrate the services on a single server.\nNote that this deployment does not build and serve the Workstation client installers, although that could certainly be added in cases where those pieces need to be developed and tested. In most cases, however, it is expected that this server-side deployment be paired with a development client built and run directly from IntelliJ or NetBeans.\nSystem Setup This deployment should work on any system where Docker is supported. Currently, it has only been tested on Scientific Linux 7 and macOS Mojave.\nTo install Docker and Docker Compose on Oracle Linux 8, follow these instructions.\nClone This Repo Begin by cloning this repo:\ngit clone https://github.com/JaneliaSciComp/jacs-cm.git cd jacs-cm Configure The System Next, create a .env.config file inside the jacs-cm directory. This file defines the environment (usernames, passwords, etc.) You can copy the template to get started:\ncp .env.template .env.config vi .env.config At minimum, you must customize the following:\n Configured the UNAME and GNAME to your liking. Ideally, these should be your username and primary group. Setup REDUNDANT_STORAGE and NON_REDUNDANT_STORAGE to point to directories accessible by UNAME:GNAME. If you want to use the defaults, you may need to create these directories and set the permissions yourself. Set HOST1 to the hostname you are deploying on. If possible, use a fully-qualified hostname – it should match the SSL certificate you intend to use. Fill in all the unset passwords with \u003e8 character passwords. You should only use alphanumeric characters, special characters are not currently supported. Generate 32-byte secret keys for JWT_SECRET_KEY and MONGODB_SECRET_KEY.  Enable Databases (optional) Currently, Janelia runs MongoDB outside of the Swarm, so they are commented out in the deployment. If you’d like to run the databases as part of the swarm, edit the yaml files under ./deployments/jacs/ and uncomment the databases.\nInitialize Filesystems The first step is to initialize the filesystem. Ensure that your REDUNDANT_STORAGE (default: /opt/jacs), NON_REDUNDANT_STORAGE (default: /data) directories exist and can be written to by your UNAME:GNAME user (default: docker-nobody). If you are using Docker for Mac, you’ll need to take the additional step of configuring share paths at Docker -\u003e Preferences… -\u003e File Sharing. Add both REDUNDANT_STORAGE and NON_REDUNDANT_STORAGE and then click “Apply \u0026 Restart” to save your changes.\nNext, run the filesystem initialization procedure:\n./manage.sh init-local-filesystem You should see output about directories being created and initialized. If there are any errors, they need to be resolved before moving further.\nOnce the initialization is complete, you can manually edit the files found in CONFIG_DIR. You can use these configuration files to customize much of the JACS environment.\nSSL Certificates At this point, it is strongly recommended is to replace the self-signed certificates in CONFIG_DIR/certs/* with your own certificates signed by a Certificate Authority:\nsudo cp /path/to/your/certs/cert.{crt,key} $CONFIG_DIR/certs/ sudo chown docker-nobody:docker-nobody $CONFIG_DIR/certs/* If you use self-signed certificates, you will need to set up the trust chain for them later.\nExternal Authentication The JACS system has its own self-contained authentication system, and can manage users and passwords internally.\nIf you’d prefer that users authenticate against your existing LDAP or ActiveDirectory server, edit $CONFIG_DIR/jacs-sync/jacs.properties and add these properties:\nLDAP.URL= LDAP.SearchBase= LDAP.SearchFilter= LDAP.BindDN= LDAP.BindCredentials= The URL should point to your authentication server. The SearchBase is part of a distinguished name to search, something like “ou=People,dc=yourorg,dc=org”. The SearchFilter is the attribute to search on, something like “(cn={{username}})”. BindDN and BindCredentials defines the distinguished name and password for a service user that can access user information like full names and emails.\nStart All Containers Now you can bring up all of the application containers:\n./manage.sh compose up -d You can monitor the progress with this command:\n./manage.sh compose ps Initialize Databases If you are running your own databases, you will need to initalize them now:\n./manage.sh init-databases Verify Functionality You can verify the Authentication Service is working as follows:\n./manage.sh login You should be able to log in with the default admin account (root/root), or any LDAP/AD account if you’ve configured external authentication. This will return a JWT that can be used on subsequent requests.·\nIf you run into any problems, these troubleshooting tips may help.\nUpdating Containers Containers in this deployment are automatically updated by Watchtower whenever a new one is available with the “latest” tag. To update the deployment, simply build and push a new container to the configured registry.\nStop All Containers To stop all containers, run this command:\n./manage.sh compose down Build and Run Client Now you can checkout the Janelia Workstation code base in IntelliJ or NetBeans and run its as per its README.\nThe client will ask you for the API Gateway URL, which is just http://$HOST1. In order to automatically connect to your standalone gateway instance, you can create a new file at workstation/modules/Core/src/main/resources/my.properties with this content (replacing the variables with the values from your .env.config file):\napi.gateway=https://$HOST1 ","categories":"","description":"How to deploy HortaCloud to your own local server\n","excerpt":"How to deploy HortaCloud to your own local server\n","ref":"/docs/development/composedeployment/","tags":"","title":"Single server deployment"},{"body":"This document describes the canonical two-server Janelia Workstation deployment for supporting neuron tracing for the MouseLight project at the Janelia Research Campus and other research institutions. This deployment uses Docker Swarm to orchestrate prebuilt containers available on Docker Hub.\nDeployment Diagram  Hardware Setup The JACS backend consists of several services which need to be deployed on server hardware. We have tested the following configuration:\n Two Dell PowerEdge R740XD Servers  Each server has 40 cores (e.g. Intel Xeon Gold 6148 2.4G) Each server has 192 GB of memory The hard drives are configured as follows:  2 x 200GB SSD in RAID1 - Operating system (/) 2 x 960GB SSD in RAID1 - Databases, user preferences, etc. (/opt) 12 x 10TB in RAID6 - Image files (/data)      The rest of this guide assumes that you have two server hosts dedicated to deploying this system, which are configured as listed above. They will be referred to as HOST1 and HOST2.\nThis two-server deployment can support 5-10 concurrent users. We use the following configuration for client machines:\n Dell Precision 5820 Tower  Minimum of 8 cores (e.g. Intel Xeon W-2145 3.7GHz) 128 GB of memory Nvidia GTX1080Ti 11GB (reference card, blower fan style)  Other similar cards will work fine: GTX1070, GTX1080, RTX2080   Windows 10    Install Oracle Linux 8 The backend software runs on any operating system which supports Docker. However, Oracle Linux is used at Janelia and has been extensively tested with this software. Therefore, we recommend installing the latest version of Oracle Linux 8.\nInstall Docker To install Docker and Docker Compose on Oracle Linux 8, follow these instructions.\nSetup Docker Swarm On HOST1, bring up swarm as a manager node:\ndocker swarm init On HOST2, copy and paste the output of the previous command to join the swarm as a worker.\ndocker swarm join --token ... All further commands should be executed on HOST1, i.e. the master node. One final step is to label the nodes. Each node needs the “jacs=true” label, as well as “jacs_name=nodeX”.\ndocker node update --label-add jacs_name=node1 $(docker node ls -f \"role=manager\" --format \"{{.ID}}\") docker node update --label-add jacs_name=node2 $(docker node ls -f \"role=worker\" --format \"{{.ID}}\") docker node update --label-add jacs=true $(docker node ls -f \"role=manager\" --format \"{{.ID}}\") docker node update --label-add jacs=true $(docker node ls -f \"role=worker\" --format \"{{.ID}}\") Finally, you can run this command to ensure that both nodes are up and in Ready status:\ndocker node ls Download the installer Download the installer and extract it onto the master node, as follows. VERSION should be set to the latest stable version available on the releases page.\nexport VERSION=\u003cversion_number_here\u003e cd /opt sudo mkdir deploy sudo chown $USER deploy cd deploy curl https://codeload.github.com/JaneliaSciComp/jacs-cm/tar.gz/$VERSION | tar xvz ln -s jacs-cm-$VERSION jacs-cm cd jacs-cm Configure The System Next, create a .env.config file inside the intaller directory. This file defines the environment (usernames, passwords, etc.) You can copy the template to get started:\ncp .env.template .env.config vi .env.config At minimum, you must customize the following:\n Set DEPLOYMENT to mouselight. Ensure that REDUNDANT_STORAGE and NON_REDUNDANT_STORAGE point to the disk mounts you used during the operating system installation. Alternatively, you can make symbolic links so that the default paths point to your mounted disks. Set HOST1 and HOST2 to the two servers you are deploying on. Use fully-qualified hostnames here – they should match the SSL certificate you intend to use. Fill in all the unset passwords with \u003e8 character passwords. You should only use alphanumeric characters, special characters are not currently supported. Generate 32-byte secret keys for JWT_SECRET_KEY, MONGODB_SECRET_KEY, JACS_API_KEY, and JADE_API_KEY. If you want to enable automated error reporting from the Workstation client, set MAIL_SERVER to an SMTP server and port, e.g. smtp.my.org:25.  Deploy Services Now you can follow the Swarm Deployment instructions to actually deploy the software.\nImport Imagery If you have your own imagery, you will need to convert it before importing.\nEach brain image is referred to as a “sample”. You should place each sample in $DATA_DIR/jacsstorage/samples on one of the servers. If you place the sample on the first server, in $DATA_DIR/jacsstorage/samples/\u003csampleDirectoryName\u003e, then in the Workstation you will refer to the sample as /jade1/\u003csampleDirectoryName\u003e.\nAs a side note if you use ’lvDataImport’ service to generate the imagery, the service does not use JADE to persist the data. So if you need the data to be on a storage that is only accessible on certain hosts, JACS must run on that host in order to be able to write the data to the corresponding location. If that is not an option you can generate the data to a temporary location then move it to the intended sample directory.\nIn the Workstation, select File → New → Tiled Microscope Sample, and then set “Sample Name” to \u003csampleDirectoryName\u003e and “Path to Render Folder” as /jade1/\u003csampleDirectoryName\u003e.\nOpen the Data Explorer (Window → Core → Data Explorer) and navigate to Home, then “3D RawTile Microscope Samples”, and your sample name. Right-click the sample and choose “Open in Large Volume Viewer”. The 2D imagery should load into the middle panel. You should be able to right-click anywhere on the image and select “Navigate to This Location in Horta (channel 1)”, to load the 3D imagery.\nFind More Information This concludes the MouseLight Workstation installation procedure. Further information on using the tools can be found in the User Manual.\n","categories":"","description":"How to deploy Horta to a pair of servers\n","excerpt":"How to deploy Horta to a pair of servers\n","ref":"/docs/administration/bare_metal/twoserverdeployment/","tags":"","title":"Two-server deployment"},{"body":" We are in the process of writing this documentation.\n ","categories":"","description":"Guide for developing HortaCloud code\n","excerpt":"Guide for developing HortaCloud code\n","ref":"/docs/development/","tags":"","title":"Developer's guide"},{"body":"This document describes the full three-server Janelia Workstation deployment for supporting both FlyLight and MouseLight at Janelia Research Campus. This deployment uses Docker Swarm to orchestrate containers available on Docker Hub.\nMultiple environments are supported with this deployment:\n prod dev  Deployment Diagram  Hardware Setup This guide assumes that you have three high-end servers which can be dedicated to running Docker Swarm. We use 40-core servers with at least 192 GB of RAM. YMMV.\nWe’ll refer to the three deployment hosts as HOST1, HOST2, and HOST3.\nNote that an additional server or VM is necessary to run the JACS Async Services outside of Docker, if you are planning to submit image processing jobs to an HPC cluster, such as with the Image Processing Pipeline (IPP).\nInstall Oracle Linux 8 The backend software should run on any operating system which supports Docker. However, Oracle Linux is used at Janelia and has been extensively tested with this software. Therefore, we recommend installing the latest version of Oracle Linux 8. Previously, we used Scientific Linux 7 and that is also known well although it’s no longer supported.\nInstall Docker To install Docker and Docker Compose on Oracle Linux 8, follow these instructions.\nSetup Docker Swarm On HOST1, bring up swarm as a manager node, and give it a label:\ndocker swarm init On HOST2 and HOST3, copy and paste the output of the previous command to join the swarm as a worker.\ndocker swarm join --token ... All further commands should be executed on HOST1, i.e. the master node. One final step is to label the nodes. Each node needs the “jacs=true” label, as well as “jacs_name=nodeX”. You can find out the node ids by running docker node ls.\ndocker node update --label-add jacs_name=node1 \u003cid of HOST1\u003e docker node update --label-add jacs_name=node2 \u003cid of HOST2\u003e docker node update --label-add jacs_name=node3 \u003cid of HOST3\u003e docker node update --label-add jacs=true \u003cid of HOST1\u003e docker node update --label-add jacs=true \u003cid of HOST2\u003e docker node update --label-add jacs=true \u003cid of HOST3\u003e Download the installer Download the installer and extract it onto the master node, as follows. VERSION should be set to the latest stable version available on the releases page.\nexport VERSION=\u003cversion_number_here\u003e cd /opt sudo mkdir deploy sudo chown $USER deploy cd deploy curl https://codeload.github.com/JaneliaSciComp/jacs-cm/tar.gz/$VERSION | tar xvz ln -s jacs-cm-$VERSION jacs-cm cd jacs-cm Configure The System Next, create a .env.config file inside the installer directory. This file defines the environment (usernames, passwords, etc.) You can copy the template to get started:\ncp .env.template .env.config vi .env.config At minimum, you must customize the following:\n Ensure that REDUNDANT_STORAGE and NON_REDUNDANT_STORAGE point to the disk mounts available on the local systems. Alternatively, you can make symbolic links so that the default paths point to your mounted disks. Set HOST1, HOST2, and HOST3 to the servers you are deploying on. Use fully-qualified hostnames here – they should match the SSL certificate you intend to use. Fill in all the unset passwords with \u003e8 character passwords. You should only use alphanumeric characters, special characters are not currently supported. Generate 32-byte secret keys for JWT_SECRET_KEY and MONGODB_SECRET_KEY.  Enable Databases (optional) Currently, Janelia runs MongoDB outside of the Swarm, so they are commented out in the deployment. If you’d like to run the databases as part of the swarm, edit the yaml files under ./deployments/jacs/ and uncomment the databases.\nDeploy Services Now you can follow the Swarm Deployment instructions to actually deploy the software.\nDeploy ELK for monitoring To deploy an ELK stack for monitoring follow ELK Deployment.\nFind More Information This concludes the MouseLight Workstation installation procedure. Further information on using the tools can be found in the User Manual.\n","categories":"","description":"How to deploy Horta to three servers\n","excerpt":"How to deploy Horta to three servers\n","ref":"/docs/administration/bare_metal/fulldeployment/","tags":"","title":"Three-server deployment"},{"body":"To install Docker on a server running Oracle Linux 8, some special configuration is needed. Much of this comes from the official documentation.\nPrerequisites First, make sure that Docker isn’t already installed:\nyum list installed | grep docker Remove any existing installations before proceeding.\nEnsure that /opt (or whatever disk is to be used for Docker data) is formatted with the d_type option. You can find out like this:\n$ xfs_info /opt meta-data=/dev/mapper/vg0-lv_opt isize=512 agcount=4, agsize=5701632 blks  = sectsz=4096 attr=2, projid32bit=1  = crc=1 finobt=0 spinodes=0 data = bsize=4096 blocks=22806528, imaxpct=25  = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=1 log =internal bsize=4096 blocks=11136, version=2  = sectsz=4096 sunit=1 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 If the above says ftype=0, then the filesystem will need to be recreated (reference).\nInstalling Docker sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install -y docker-ce If this fails with error messages like package containerd.io-1.4.3-3.2.el8.x86_64 conflicts with runc provided by runc then you may have conflicting packages installed already. Try removing them like this:\nsudo yum erase podman buildah Post Install Configuration To avoid running out of space on the root partition, you should configure docker to point to /opt/docker (reference):\nsudo mkdir -p /opt/docker sudo chown root:root /opt/docker sudo chmod 701 /opt/docker Next, configure Docker to use the overlay2 storage driver (reference).\nCreate a file at /etc/docker/daemon.json with this content:\n{  \"data-root\": \"/opt/docker\",  \"storage-driver\": \"overlay2\" } You should also create a local user called “docker-nobody” with UID 4444, which can be used for running containers without root.\nsudo groupadd -g 4444 docker-nobody sudo useradd --uid 4444 --gid 4444 --shell /sbin/nologin docker-nobody Finally, you can start Docker:\nsudo systemctl enable docker sudo systemctl start docker Installing Docker Compose You’ll also need to install the Docker Compose executable:\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose Note that there are newer versions of the Docker Compose, but they have bugs that prevent them from working with our scripts. Please use the version above to ensure compatibility.\n","categories":"","description":"How to install Docker on Oracle Linux 8\n","excerpt":"How to install Docker on Oracle Linux 8\n","ref":"/docs/administration/bare_metal/installingdocker/","tags":"","title":"Installing Docker"},{"body":"This document assumes that you have downloaded and configured the installer according to one of the deployment guides.\nThe following steps are common to all Docker Swarm deployments of the Workstation.\nInitialize Filesystems The first step is to initialize the filesystems on all your Swarm systems. On each server, ensure that your REDUNDANT_STORAGE (default: /opt/jacs), NON_REDUNDANT_STORAGE (default: /data) directories exist and can be written to by your UNAME:GNAME user (default: docker-nobody).\nThen, run the Swarm-based initialization procedure from HOST1:\n./manage.sh init-filesystems You can manually edit the files found in CONFIG_DIR to further customize the installation.\nOnce the initialization completes you can just run:\n./manage.sh stop Also it is a good idea to stop the initialization stack if anything goes wrong before you try it again.\nSSL Certificates At this point, it is strongly recommended is to replace the self-signed certificates in $CONFIG_DIR/certs/* on each server with your own certificates signed by a Certificate Authority:\n. .env sudo cp /path/to/your/certs/cert.{crt,key} $CONFIG_DIR/certs/ sudo chown docker-nobody:docker-nobody $CONFIG_DIR/certs/* If you continue with the self-signed certificates, you will need to set up the trust chain for them later.\nExternal Authentication The JACS system has its own self-contained authentication system, and can manage users and passwords internally.\nIf you’d prefer that users authenticate against your existing LDAP or ActiveDirectory server, edit $CONFIG_DIR/jacs-sync/jacs.properties and add these properties:\nLDAP.URL= LDAP.SearchBase= LDAP.SearchFilter= LDAP.BindDN= LDAP.BindCredentials= The URL should point to your authentication server. The SearchBase is part of a distinguished name to search, something like “ou=People,dc=yourorg,dc=org”. The SearchFilter is the attribute to search on, something like “(cn={{username}})”. BindDN and BindCredentials defines the distinguished name and password for a service user that can access user information like full names and emails.\nStart All Containers Next, start up all of the service containers. The parameter to the start command specifies the environment to use. The dev environment uses containers tagged as latest and updates them automatically when they change. The prod deployment uses a frozen set of production versions. When in doubt, use the prod deployment:\n./manage.sh start It may take a minute for the containers to spin up. You can monitor the progress with this command:\n./manage.sh status At this stage, some of the services may not start because they depend on the databases. The next step will take care of that.\nInitialize Databases Now you are ready to initalize the databases:\n./manage.sh init-databases It’s normal to see the “Unable to reach primary for set rsJacs” error repeated until the Mongo replica set converges on healthiness. After a few seconds, you should see a message “Databases have been initialized” and the process will exit successfully.\nYou can validate the databases as follows:\n Verify that you can connect to the Mongo instance using ./manage.sh mongo, and run show tables Connect to the RabbitMQ server at http://HOST1:15672 and log in with your RABBITMQ_USER/RABBITMQ_PASSWORD  Restart Services Bounce the stack so that everything reconnects to the databases:\n./manage.sh stop ./manage.sh start Now you shoult wait for all the services to start. You can continue to monitor the progress with this command:\n./manage.sh status If any container failed to start up, it will show up with “0/N” replicas, and it will need to be investigated before moving further. You can view the corresponding error by specifying the swarm service name, as reported by the status command. For example, if jacs_jade-agent2 fails to start, you would type:\n./manage.sh status jacs_jade-agent2 Verify Functionality You can verify the Authentication Service is working as follows:\n./manage.sh login You should be able to log in with the default admin account (root/root), or any LDAP/AD account if you’ve configured external authentication. This will return a JWT that can be used on subsequent requests.\nIf you run into any problems, these troubleshooting tips may help.\nManage Services As long as your Docker daemon is configured to restart on boot, all of the Swarm services will also restart automatically when the server is rebooted.\nIf you want to remove all the services from the Swarm and do a clean restart of everything, you can use this command:\n./manage.sh stop To pull and redeploy the latest image for a single service, e.g. workstation-site:\n./manage.sh restart jacs_workstation-site Configure Crontabs The following crontab entries should be configured in order to perform periodic maintenance automatically. It’s easiest to install the crontabs on the docker-nobody account:\nsudo crontab -u docker-nobody -e Database maintenance refreshes indexes and updates entities permissions:\n0 2 * * * /opt/deploy/jacs-cm/manage.sh dbMaintenance group:admin -refreshIndexes -refreshPermissions SOLR index refresh (if using SOLR):\n0 3 * * * /opt/deploy/jacs-cm/manage.sh rebuildSolrIndex Database backups (if using containerized databases):\n0 4 * * * /opt/deploy/jacs-cm/manage.sh backup mongo Install The Workstation Client Now that the services are all running, you can navigate to https://HOST1 in a web browser on your client machine, and download the Workstation client. Follow the installer wizard, using the default options, then launch the Workstation.\nIf you are using the default self-signed certificate, you will need to take some extra steps to install it on the client.\nIf you are using LDAP/AD integration, you should be able to log in with your normal user/password. If you are using the Workstation’s internal user management, you must first login as user root (password: root), and then select Window → Core → Administrative GUI from the menus. Click “View Users”, then “New User” and create your first user. Add the user to all of the relevant groups, including MouseLight.\nOptional: Adding NFS Storage If you have data on NFS, and those NFS drives can be mounted on the MouseLight hosts, that data can be made available to the Workstation.\nFirst, create a file at deployments/mouselight/docker-swarm.prod.yml which looks like this:\nversion:'3.7'services:jade-agent1:volumes:- /path/to/your/nfs:/path/to/your/nfs:ro,sharedjade-agent2:volumes:- /path/to/your/nfs:/path/to/your/nfs:ro,sharedThis will expose the path to both JADE agent containers. Now you need to configure the JADE agents to serve this data. On both hosts, edit /opt/jacs/config/jade/config.properties and add the following:\nStorageVolume.mouseLightNFS.RootDir=/path/to/your/nfs StorageVolume.mouseLightNFS.VirtualPath=/path/to/your/nfs StorageVolume.mouseLightNFS.Shared=true StorageVolume.mouseLightNFS.Tags=mousebrain,light StorageVolume.mouseLightNFS.VolumePermissions=READ You can use any name you want instead of mouseLightNFS. Then you should add this name to StorageAgent.BootstrappedVolumes:\nStorageAgent.BootstrappedVolumes=jade1,mouseLightNFS You will need to bounce the service stack to pick up these changes.\n","categories":"","description":"Deploying the JACS services using Docker Swarm\n","excerpt":"Deploying the JACS services using Docker Swarm\n","ref":"/docs/administration/bare_metal/swarmdeployment/","tags":"","title":"Deploying JACS"},{"body":"Currently ELK is only available in a swarm deployment because of how the ELK stack is configured.\nMost of the set up necessary for ELK - configuration files and/or data directories - is already done as part of filesystem initialization performed while executing:\n./manage.sh init-filesystems The current ELK data directories are created on /data/ directory so this directory must exist.\nOne manual step is to set the vm.max_map_count value required for running elasticsearch. This is done by adding vm.max_map_count=262144 line to /etc/sysctl.conf and then run sysctl -p (typically this must be done as root)\nAfter that deploying the elk stack for monitoring the application only requires starting with:\n./manage.sh start-elk The command to stop the monitoring is:\n./manage.sh stop-elk Import data from an old stack To import data from an old stack the old stack nodes must be whitelisted in the ELK_WHITELIST environment variable so that they can be accessible to the current cluster for importing indexes.\nSome useful elasticsearch endpoints:\n List available indices  curl http://\u003cescoordinator\u003e:9200/_cat/indices  Import an index from a remote cluster:  #!/bin/bash  remoteost=$1 indexName=$2  curl -H 'Content-Type: application/json' -X POST http://e03u08.int.janelia.org:9200/_reindex -d \"{ \\\"source\\\": { \\\"remote\\\": { \\\"host\\\": \\\"http://${remoteHost}:9200\\\" }, \\\"index\\\": \\\"${indexName}\\\", \\\"query\\\": { \\\"match_all\\\": {} } }, \\\"dest\\\": { \\\"index\\\": \\\"${indexName}\\\" } }\"  Export kibana objects  Here’s an example to export kibana visualizations but the command is identical for any one of [config, index-pattern, visualization, search, dashboard, url] - just set the appropriate type\ncurl http://\u003coldkibanahost\u003e:5601/api/saved_objects/_export -H 'kbn-xsrf: true' \\  -H 'Content-Type: application/json' \\  -d '{\"type\": \"visualization\" }' \u003e local/kibana-visualizations.ndjson  To import  Use the file generated by the above export command and run\ncurl -X POST http://e03u06.int.janelia.org:5601/api/saved_objects/_import \\  -H 'kbn-xsrf: true' \\  --form file=@local/kibana-visualizations.ndjson ","categories":"","description":"How to deploy ELK for log monitoring\n","excerpt":"How to deploy ELK for log monitoring\n","ref":"/docs/administration/bare_metal/elkdeployment/","tags":"","title":"Deploying ELK"},{"body":"A self-signed certificate is automatically generated during the init-filesystem step of a jacs-cm installation. For production use, it is recommended that you replace this certificate with a real one. The self-signed certificate is less secure, and it requires some extra steps to get working.\nIn order to connect to https://HOST1, you need to accept the certificate in the browser. This differs by browser.\nThen, in order to allow the Workstation to accept the certificate, it needs to be added to Java’s keystore. For this, you will need the certificate on the desktop computer where you are running the Workstation. You can either export it from the browser, or copy it over from the server. On the server, it is located in $CONFIG_DIR/certs/cert.crt. Once you have the certificate, you can import it using Java’s keytool.\nWindows On Windows, click Start and type “cmd” to find the Command Prompt, then right-click it and select “Run as administrator”. You need to find out where your JVM is installed by looking under C:\\Program Files\\Zulu. Then, import the certificate. Here it’s assumed the cert was saved to the current working directory:\nC:\\\u003e \"C:\\Program Files\\Zulu\\zulu-8\\bin\\keytool.exe\" -import -alias mouse1selfcert -file cert.crt -keystore \"C:\\Program Files\\Zulu\\zulu-8\\jre\\lib\\security\\cacerts\" -keypass changeit -storepass changeit The alias should be a descriptive name that will be used later if you want to remove or view the certificate. The password for the JVM keystore is actually “changeit”, so don’t change the keypass or storepass values above.\nMac or Linux First, you need to know where the JVM is located. You can use the same method that the Workstation uses to locate the JVM. This ensures you are modifying the correct one. Open a Terminal and type:\nexport JDK_HOME=`/usr/libexec/java_home -v 1.8` Now you can import the certificate into the keystore. Here it’s assumed the cert was saved to the desktop:\nsudo keytool -import -v -trustcacerts -alias mouse1 -file ~/Desktop/cert.crt -keystore $JDK_HOME/jre/lib/security/cacerts -keypass changeit -storepass changeit The alias should be a descriptive name that will be used later if you want to remove or view the certificate. The password for the JVM keystore is actually “changeit”, so don’t change the keypass or storepass values above.\n","categories":"","description":"Using self-signed server certificates\n","excerpt":"Using self-signed server certificates\n","ref":"/docs/administration/bare_metal/selfsignedcerts/","tags":"","title":"Self-signed Certificates"},{"body":"","categories":"","description":"How to contribute to the software\n","excerpt":"How to contribute to the software\n","ref":"/docs/development/contributing/","tags":"","title":"Contribution guidelines"},{"body":"We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and GitHub Pages to manage the deployment of the site.\nHugo is an open-source static site generator that provides us with templates, content organization in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nUpdating a single page If you’ve just spotted something you’d like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don’t already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions to install Hugo. It must be the extended version, which supports SCSS.\n  Fork the HortaCloud website repo locally:\ngit clone --recurse-submodules --depth 1 https://github.com/JaneliaSciComp/hortacloud-website   Run npm install and hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you’re serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you’ve found a problem in the docs, but you’re not sure how to fix it yourself, please create an issue in the HortaCloud website repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\n","categories":"","description":"How to contribute to the docs\n","excerpt":"How to contribute to the docs\n","ref":"/docs/contribution-guidelines/","tags":"","title":"Editing the documentation"},{"body":"Importing imagery Single Sample Import If you already have the data on the S3 buckets in the Workstation, select File → New → Tiled Microscope Sample, and then set “Sample Name” to \u003csampleDirectoryName\u003e and “Path to Render Folder” as /\u003cbucketName\u003e/\u003csampleDirectoryName\u003e.\nOpen the Data Explorer (Window → Core → Data Explorer) and navigate to Home, then “3D RawTile Microscope Samples”, and your sample name. Right-click the sample and choose “Open in Horta”. This will open the Horta Panel and then from the Horta Panel you have options to create a workspace or to open the 2D or the 3D volume viewer.\nBatch Sample Import The workstation offers an option to import all your samples from an S3 Bucket mapped on the backend into the workstation. This can be done from the Workstation, select Services → Load Horta Data. This opens a dialog box that allows you to enter the location of your samples and the data owner. The location of your data can be entered like \u003cs3_bucket_name\u003e/\u003cfull_moouselight_data_prefix\u003e, e.g. janelia-mouselight-imagery/images. For sample owner typically select Mouselight Users (mouselight) from the drop down selection. Once you click OK the system will start a background task that will try to create new samples from all folders at the specified location and you will start seeing new samples under Home (mouselight)/3D Tile Microscope Samples as they are imported.\nSystem backup The system can be configured to run nightly backups. All it is needed is to specify a writeable bucket (HORTA_BACKUP_BUCKET) and a prefix (HORTA_BACKUP_FOLDER) that will hold the backups. Currently we only backup the Mongo database that contains samples info and tracing data and each backup will be stored in a timestamp (‘yyyyMMddHHmmss’) folder under the base backup prefix.\nSystem restore If system backups are available the sample and tracing data can be restored from a specified backup bucket (HORTA_RESTORE_BUCKET) and prefix (HORTA_RESTORE_FOLDER) which typically was created by the nightly backup job.\n","categories":"","description":"Day-to-day operation of the system\n","excerpt":"Day-to-day operation of the system\n","ref":"/docs/administration/aws/operation/","tags":"","title":"Operation"},{"body":"The Workstation/JACS system relies on JADE for its storage API.\nAdding a new Storage Volume Add bootstrap to the JADE configuration\nOn HOST1, edit /opt/jacs/config/jade/config.properties and add a block for your new volume, for example:\nStorageVolume.s3data.RootDir=/s3data StorageVolume.s3data.VirtualPath=/s3jade StorageVolume.s3data.Shared=true StorageVolume.s3data.Tags=aws,cloud StorageVolume.s3data.VolumePermissions=READ,WRITE,DELETE The properties configure the volume as follows:\n RootDir: defines the actual path to the data on disk VirtualPath: optionally defines a virtual path which is mapped to the actual path Shared: true if the volume should be accessible to all volumes Tags: tags used by applications to find appropriate volumes VolumePermissions: list of operations that JADE can execute (READ,WRITE,DELETE)  Also add your volume to StorageAgent.BootstrappedVolumes, so that it will be created the next time the service is restarted.\nMount the path into the containers\nEdit the compose/swarm files for your deployment and mount the volume path as a Docker volume. For example, if your DEPLOYMENT is jacs, and STAGE is dev, you must edit these two files:\ndeployments/jacs/docker-compose.dev.yml deployments/jacs/docker-swarm.dev.yml\nYou should add your volume for all services jade-agent\u003cN\u003e which you want to service that volume.\nFor example:\njade-agent1:volumes:- /data/s3data:/s3data:sharedRestart the stack after making the changes above and the volume will be created when the JADE worker starts.\nHost-specific Volumes By default, all JADE agents are configured to serve all volumes in the database. You can use StorageAgent.ServedVolumes to control which volumes are served by which hosts.\n","categories":"","description":"Managing storage volumes on JADE\n","excerpt":"Managing storage volumes on JADE\n","ref":"/docs/administration/bare_metal/storagevolumes/","tags":"","title":"Storage volumes"},{"body":"In principle, any 3d volumetric data can be imported into the MouseLight Workstation. At this moment we only provide some very basic tools for converting only TIFF format images into the expected format on disk. Another limitation of the current tools is that the entire volume must be in a single tiff file (per channel)\nThe imagery for MouseLight Workstation is a directory containing TIFF and KTX images organized into octrees. JACS compute includes a a service that can generate the octree data from a single volume TIFF file. If there is more than 1 channel, the channels are numbered 0 .. n-1 and each channel is expected to be in its own file. For example if you have 2 channels you would have two tiff files:\n/path/to/volume/volume.0.tiff /path/to/volume/volume.1.tiff The import service requires docker or singularity installed because the actual conversion services are packaged in two docker containers - one that generates a TIFF octree and the other one that takes the TIFF octree and converts the octant channel images into the correspomding ktx blocks.\nCurrently pre-built containers for tiff octree tool and ktx tool are only available at Janelia’s internal registry, but the containers build files are available at https://github.com/JaneliaSciComp/jacs-tools-docker.git in the ’tiff_octree’ and ‘ktx_octree’ subdirectories, respectively. KTX tool container can also be built from https://github.com/JaneliaSciComp/pyktx.git.\nGenerating the sample octree requires only a JACS Async service call which is a simple HTTP REST call that can be done using curl or Postman. This service can also be invoked from the JACS dashboard http://api-gateway-host:8080 by going to the “Services List” after Login and selecting “lvDataImport”. The dashboard should also offer a brief description of each argument.\ncurl invocation to run the service with singularity (this is the JACS default):\ncurl -X POST \\  https://api-gateway-host/SCSW/JACS2AsyncServices/v2/async-services/lvDataImport \\  -H 'Accept: application/json' \\  -H 'Content-Type: application/json' \\  -H 'Authorization: Bearer Your_Token' \\  -d '{ \"args\": [ \"-containerProcessor\", \"singularity\", \"-inputDir\", \"/path/to/volumeData\", \"-inputFilenamePattern\", \"test.{channel}.tif\", \"-outputDir\", \"/path/to/lvv/sampleData\", \"-channels\", \"0,1\", \"-levels\", \"4\", \"-voxelSize\", \"1,1,1\", \"-subtreeLengthForSubjobSplitting\", 2, \"-tiffOctreeContainerImage\", \"docker://registry.int.janelia.org/jacs-scripts/octree:1.0\", \"-ktxOctreeContainerImage\", \"docker://registry.int.janelia.org/jacs-scripts/pyktx:1.0\" ], \"resources\": { } } ' curl invocation to run the service with docker:\ncurl -X POST \\ https://api-gateway-host/SCSW/JACS2AsyncServices/v2/lvDataImport \\ -H 'Accept: application/json' \\ -H 'Content-Type: application/json' \\ -H 'Authorization: Bearer Your_Token' \\ -d '{ \"args\": [ \"-containerProcessor\", \"docker\", \"-inputDir\", \"/path/to/volumeData\", \"-inputFilenamePattern\", \"default.{channel}.tif\", \"-outputDir\", \"/path/to/lvv/sampleData\", \"-channels\", \"0\", \"-levels\", \"3\", \"-voxelSize\", \"1,1,1\", \"-subtreeLengthForSubjobSplitting\", 3, \"-tiffOctreeContainerImage\", \"registry.int.janelia.org/jacs-scripts/octree:1.0\", \"-ktxOctreeContainerImage\", \"registry.int.janelia.org/jacs-scripts/pyktx:1.0\" ], \"resources\": { } } ' Arguments description  containerProcessor - which container runtime to use docker or singularity inputDir - path to original volume data inputFileNamePattern - original tiff name. Notice that if you have multiple channels and the channel is anywhere in the name you can use {channel} which will be replaced with the actual channel number. outputDir - where the octree will be generated - typically this is the sample data directory that will be imported in the workstation channels - specifies a list of all available channels, e.g. ‘0,1’ if there are two channels or ‘0’ if there is only 1 channel. levels - the number of octree levels. This is left up to the user and the service will not try to figure out the optimum value for the number of octree levels. voxelSize - specifies the voxel size in um. tiffOctreeContainerImage - tiff octree container image. Not that the format is slightly different for specifying the image name if docker is used or if singularity is used. Since singularity supports docker images, if singularity runtime is used you need to explictily specify that the image is a docker image. ktxOctreeContainerImage - ktx octree container image. See above regarding the format based on container processor type. subtreeLengthForSubjobSplitting - this parameter applies only for the ktx processor and it tells the service how to split the job and it has a default value of 5. The conversion process typically starts at a certain node and it performs tiff to ktx conversion for a specified number of levels. If you start a process at the root and convert all levels the job may take a while so if you want you have the option to parallelize it by going only for a limited number of levels from the root and start new jobs from all nodes at the level equal with the subtree depth. For example if you have 8 levels and you set subtreeLengthForSubjobSplitting to 3 then KTX conversion will start 1 + 8^3 + 8^6 = 1 + 512 + 262144 = 262657 jobs with the following parameters: \"\" 3, \"111\" 3, \"112\" 3, ..., \"118\" 3, ..., \"888\" 3, ..., \"111111\" 3, ..., \"888888\" 3 If you leave the default (subtreeLengthForSubjobSplitting=5) then the KTX conversion will start only 1 + 8^5 = 32769 jobs (\"11111\" 5, ..., \"88888\" 5)  Note that the service invocation requires authentication so before you invoke it, you need to obtain an JWS token from the authentication service - see the Verify Functionality section on this page.\n","categories":"","description":"How to convert data into Horta format\n","excerpt":"How to convert data into Horta format\n","ref":"/docs/administration/bare_metal/dataimport/","tags":"","title":"Data import"},{"body":"Docker These are some useful commands for troubleshooting Docker:\nView logs for Docker daemon\nsudo journalctl -fu docker Restart the Docker daemon\nsudo systemctl restart docker Remove all Docker objects, including unused containers/networks/etc.\nsudo docker system prune -a Swarm GUI If you would like to see the Swarm’s status in a web-based GUI, we recommend installing Swarmpit. It’s a single command to deploy, and it works well with the JACS stack.\nCommon issues config variable not set If you see a lot of errors or warnings similar to the ones below, first check that the .env file was generated correctly - it should have all environment variables from .env.config, present and set. If it is not just remove it and try the commands again. It is possible that you may have run a command like ./manage.sh init-filesystems before the swarm cluster was available.\nWARN[0000] The \"CONFIG_DIR\" variable is not set. Defaulting to a blank string. WARN[0000] The \"DATA_DIR\" variable is not set. Defaulting to a blank string. WARN[0000] The \"DB_DIR\" variable is not set. Defaulting to a blank string. WARN[0000] The \"BACKUPS_DIR\" variable is not set. Defaulting to a blank string. WARN[0000] The \"CERT_SUBJ\" variable is not set. Defaulting to a blank string. WARN[0000] The \"DEPLOYMENT\" variable is not set. Defaulting to a blank string. WARN[0000] The \"MONGODB_SECRET_KEY\" variable is not set. Defaulting to a blank string. WARN[0000] The \"API_GATEWAY_EXPOSED_HOST\" variable is not set. Defaulting to a blank string. WARN[0000] The \"RABBITMQ_EXPOSED_HOST\" variable is not set. Defaulting to a blank string. WARN[0000] The \"RABBITMQ_USER\" variable is not set. Defaulting to a blank string. WARN[0000] The \"RABBITMQ_PASSWORD\" variable is not set. Defaulting to a blank string. WARN[0000] The \"MAIL_SERVER\" variable is not set. Defaulting to a blank string. WARN[0000] The \"NAMESPACE\" variable is not set. Defaulting to a blank string. WARN[0000] The \"REDUNDANT_STORAGE\" variable is not set. Defaulting to a blank string. WARN[0000] The \"REDUNDANT_STORAGE\" variable is not set. Defaulting to a blank string. WARN[0000] The \"NON_REDUNDANT_STORAGE\" variable is not set. Defaulting to a blank string. WARN[0000] The \"NON_REDUNDANT_STORAGE\" variable is not set. Defaulting to a blank string. “network not found” If you see an intermittent error like this, just retry the command again:\nfailed to create service jacs-cm_jacs-sync: Error response from daemon: network jacs-cm_jacs-net not found bind errors during init-filesystems If during init-filesystems you see an error that the config folder could not be bound on a particular node of the swarm cluster, make sure you did not forget to create the config and db directories on each node that is part of the swarm. The directories must exist in order for docker to be able to mount the corresponding volumes. After you created all folders if you already ran ./manage.sh init-filesystems and it failed before you run it again stop it using\n./manage.sh stop and then you can try to re-run it\nRESTful services You can access the RESTful services from the command line. Obtain a JWT token like this:\n./manage.sh login The default admin account is called “root” with password “root” for deployments with self-contained authentication.\nNow you can access any of the RESTful APIs on the gateway, for instance:\nexport TOKEN=\u003center token here\u003e curl -k --request GET --url https://${API_GATEWAY_EXPOSED_HOST}/SCSW/JACS2AsyncServices/v2/services/metadata --header \"Content-Type: application/json\" --header \"Authorization: Bearer $TOKEN\" ","categories":"","description":"Common issues and solutions\n","excerpt":"Common issues and solutions\n","ref":"/docs/administration/bare_metal/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background_hu7c4f2febe578e47a878cdb82eefba3b8_131208_960x540_fill_catmullrom_bottom_3.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background_hu7c4f2febe578e47a878cdb82eefba3b8_131208_1920x1080_fill_catmullrom_bottom_3.png); } }  About HortaCloud Fun fact: the name \"Horta\" comes from the name of a tunneling silicon based lifeform from the Star Trek original series episode 25 \"The Devil in the Dark\". Neuron traces in 3D resemble the tunnels such a creature might make in the ground. It can also be conveniently backronymed as \"How Outstanding Researchers Trace Axons\".        This software is based on the Janelia Workstation and was originally developed for and in collaboration with the MouseLight Team Project at Janelia Research Campus.\nOngoing development and maintenance is funded by Janelia’s Open Science Software Initiative.\n    Scientific Advisors Jayaram Chandrashekar Scientific Advisor\n  Tiago Ferreira Scientific Advisor\n  Wyatt Korff Scientific Advisor\n  Nelson Spruston Scientific Advisor\n    Software Developers Jody Clements Software Engineer\n  Cristian Goina Software Engineer\n  Takashi Kawase Software Engineer\n  Donald Olbris Software Engineer\n  Konrad Rokicki Software Engineering Manager\n  David Schauder Software Engineer\n  Rob Svirskas Software Engineer\n        ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/about/","tags":"","title":"About HortaCloud"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/community/","tags":"","title":"Community"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu7c4f2febe578e47a878cdb82eefba3b8_131208_960x540_fill_catmullrom_top_3.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu7c4f2febe578e47a878cdb82eefba3b8_131208_1920x1080_fill_catmullrom_top_3.png); } }  HORTACLOUD Collaborative neuron annotation in the cloud\nDocumentation  Login to HortaCloud-Janelia   \n         Your browser does not support the video tag.   HortaCloud software provides an efficient production environment for collaborative and accurate reconstruction of long range projection neurons in light microscopy data. This software, originally developed for Janelia’s MouseLight Team Project, has allowed annotators to efficiently reconstruct entire axonal arbors of individual neurons from whole-brain light microscopy data.\n      Automated deployment Using the AWS CDK, you or your system administrator can easily deploy the entire software stack to an AWS Account with a single installation script.\n    Browser-based access We use a virtual desktop environment (VDI) called AWS AppStream to run the 3D rendering in the cloud, so you users don’t need to install any software or have access to a powerful workstation.\n    Big brains, big data Mouse brain data as large as 30 TB has been successfully traced by our annotators. You can run a distributed data import tool to bring your data to HortaCloud.\n      The Next-Generation Platform for Neuron Tracing   HortaCloud combines state-of-the-art volumetric visualization, advanced features for 3D neuronal annotation, and real-time multi-user collaboration with a set of enterprise-grade backend microservices for moving and processing large amounts of data rapidly and securely. Users can load multi-terabyte image volumes with up to three signal channels, and visualize them in 3D with multiscale volume rendering. An optimized workflow allows annotators to efficiently trace long range projection neurons in light microscopy data, including easy merging/splitting of skeletal reconstructions. Collaboration features allow a team of annotators to work together to annotate different neurons in a single volume, or build consensus by annotating the same neurons.  Horta also provides other useful features, including: Movie scripting and rendering Import/export in SWC format Text annotations Color adjustments Shared workspaces    Software architecture  This software is built on the Janelia Workstation platform, leveraging Java NetBeans to provide modularity and extensibility. The backend consists of Java-based microservices that scale to handle large volumes of data. Metadata is stored in MongoDB and real-time event handling is implemented using RabbitMQ. We deploy both the client and backend services to the AWS Cloud, leveraging AWS AppStream to process the 3D rendering and virtualize the desktop infrastructure.  Image data is stored on AWS S3, and we provide many open data sets on AWS Open Data registry that are immediately accessible in the application.        Open Science In support of Open Science, Janelia’s MouseLight project has shared all of their code and data with the scientific community. We have started the HortaCloud community as a way to share this software platform and allow others to leverage and extend it.\n    Contributions welcome As an open source community project, we greatly welcome contributions and Pull Requests. Let us know if you would like to collaborate!\n Read more …\n   Follow us on Twitter! For announcement of latest features and other developments.\n Read more …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"HortaCloud"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]